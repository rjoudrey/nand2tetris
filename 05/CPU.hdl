// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Dest pins and associated destinations:
    // d1 = A (pin 5), d2 = D (pin 4), d3 = M (pin 3)

    Not(in=instruction[15], out=isAInstruction);
    // For convenience
    Not(in=isAInstruction, out=isBInstruction);
    
    // 'D' Register
    And(a=isBInstruction, b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dOut);

    // 'A' Register
    And(a=isBInstruction, b=instruction[5], out=loadA0);
    Or(a=loadA0, b=isAInstruction, out=loadA);
    Mux16(a=aluOut, b[0..14]=instruction[0..14], sel=isAInstruction, out=newAValue);
    ARegister(in=newAValue, load=loadA, out=aOut, out[0..14]=addressM);

    // Mux to choose between A or M as second operand to ALU
    // If a=0, choose A, else M
    Mux16(a=aOut, b=inM, sel=instruction[12], out=y);

    // ALU
    ALU(x=dOut, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=jeq, ng=jlt);

    // JMP control bits:    
    Not(in=jeq, out=jne);
    Not(in=jlt, out=jnlt);
    And(a=jne, b=jnlt, out=jgt);
    Or(a=jgt, b=jeq, out=jge);
    Not(in=jgt, out=jle);
    Mux8Way16(a[0]=false, b[0]=jgt, c[0]=jeq, d[0]=jge, e[0]=jlt, f[0]=jne, g[0]=jle, h[0]=true, sel=instruction[0..2], out[0]=jump0);
    And(a=jump0, b=isBInstruction, out=jump);

    // Program counter (priority = reset, load, inc)
    PC(in=aOut, load=jump, inc=true, reset=reset, out[0..14]=pc);

    // Should we write to memory?
    And(a=isBInstruction, b=instruction[3], out=writeM);
}